ble_scanner.js
/**
 * This script uses the BLE scan functionality in scripting
 * Will look for Shelly BLU devices fingerprints in BLE advertisements
 * Prints device name and address
 */

// Shelly BLU devices:
// SBBT - Shelly BLU Button
// SBDW - Shelly BLU DoorWindow
// SBMO - Shelly BLU Motion

let ALLTERCO_DEVICE_NAME_PREFIX = ["SBBT", "SBDW", "SBMO"];

let ALLTERCO_MFD_ID_STR = "0ba9";
let BTHOME_SVC_ID_STR = "fcd2";

let SCAN_DURATION = BLE.Scanner.INFINITE_SCAN;
let ACTIVE_SCAN = true;

let SHELLY_BLU_CACHE = {};

function scanCB(ev, res) {
  if (ev !== BLE.Scanner.SCAN_RESULT) return;
  console.log(res);
  // skip if there is no service_data member
  if (typeof res.service_data === 'undefined' || typeof res.service_data[BTHOME_SVC_ID_STR] === 'undefined') return;
  // skip if we have already found this device
  if (typeof SHELLY_BLU_CACHE[res.addr] !== 'undefined') return;
  if (typeof res.local_name !== 'string') return;
  let shellyBluNameIdx = 0;
  for (shellyBluNameIdx in ALLTERCO_DEVICE_NAME_PREFIX) {
    if (res.local_name.indexOf(ALLTERCO_DEVICE_NAME_PREFIX[shellyBluNameIdx]) === 0) {
      console.log('New device found:');
      console.log('Address: ', res.addr, ' Name: ', res.local_name);
      SHELLY_BLU_CACHE[res.addr] = res.local_name;
    }
  }
}

BLE.Scanner.Start({ duration_ms: SCAN_DURATION, active: true }, scanCB);
-------------------------------------------------
blu_button_control_switch.js
function setRandomPlugColor() {
    let ledconfig = {
      "config": {
        "leds": {
          "colors": {
            "switch:0": {
              "on": {
                "rgb": [
                  Math.round(Math.random() * 100),
                  Math.round(Math.random() * 100),
                  Math.round(Math.random() * 100)
                ]
              }
            }
          }
        }
      }
    }
    Shelly.call("PLUGS_UI.SetConfig", ledconfig);
  }
  
  Shelly.addEventHandler(function(eventData){
    if (eventData.info.event === "BLU_BUTTON") {
      let data = eventData.info.data;
      if (data.Button === 1) {
        console.log("Button 1 pressed, toggling switch.");
        Shelly.call("Switch.Toggle", {id:0});
      }
      if (data.Button === 2) {
        console.log("Button 2 pressed, setting random color.");
        setRandomPlugColor();
      }
    } 
  });
-------------------------------------------------
chek_brightness_rgb.js
Shelly.addEventHandler(function(e){
    if (typeof e.info != "undefined" && e.info.event === "EXTERNAL_EVENT" &&
        e.info.data.event_type==="status" && e.info.data.src === "shellyprorgbwwpm-ac1518784c54") {
      let delta = e.info.data.delta;
      let newBrightness = delta.brightness;
      console.log("setting brightness to:", newBrightness);
      let letconfig = {
        "config": {
          "leds": {
            "colors": {
              "switch:0": {
                "on": {
                  "brightness": newBrightness
                }
              }
            }
          }
        }
      }
      Shelly.call("PLUGS_UI.SetConfig", ledconfig);
    }
  });
-------------------------------------------------
control_brightness
Shelly.addEventHandler(function(e){
    if (typeof e.info != "undefined" && e.info.event === "EXTERNAL_EVENT" &&
        e.info.data.event_type==="status" && e.info.data.src === "shellyprorgbwwpm-ac1518784c54") {
      let delta = e.info.data.delta;
      let newBrightness = delta.brightness;
      console.log("setting brightness to:", newBrightness);
      Shelly.call("Light.Set", {id:0, brightness: newBrightness, on:true});
    }
  });
-------------------------------------------------
emit_event_filter
{ 
    "filter": "false"
 }
-------------------------------------------------
set_time_zone_of_another_device.js
let my_url="http://192.168.10.112/rpc/Sys.SetConfig";
let my_body={
  "config": {
    "location": {
      "tz": "Europe/Sofia"
    }
  }
}

Shelly.call("HTTP.POST", {url: my_url, body: my_body}, function(response, errorCode, errorMessage) {
  console.log("Error code:", errorCode);
  console.log("Error message:", errorMessage);
  console.log("Response:", JSON.stringify(response));
  // response.body will be a string and needs to parsed to JavaScript object before used as such
  // we cannot use the body directly because it is a string
  // this is wrong
  //console.log(response.body.restart_required);

  // we convert the string to json object with JSON.parse(str)
  let result_json = JSON.parse(response.body);
  console.log("Restart required:", result_json.restart_required);
});
-------------------------------------------------
set_time_zone_with_http_request.js
let my_url="http://192.168.10.112/rpc/Sys.SetConfig";
let my_body={
  "config": {
    "location": {
      "tz": "Europe/Sofia"
    }
  }
}

// for HTTP.Request we need to provide the method = POST
Shelly.call("HTTP.Request", {method:"POST", url: my_url, body: my_body}, function(response, errorCode, errorMessage) {
  console.log("Error code:", errorCode);
  console.log("Error message:", errorMessage);
  console.log("Response:", JSON.stringify(response));
  // response.body will be a string and needs to parsed to JavaScript object before used as such
  // we cannot use the body directly because it is a string
  // this is wrong
  //console.log(response.body.restart_required);

  // we convert the string to json object with JSON.parse(str)
  let result_json = JSON.parse(response.body);
  console.log("Restart required:", result_json.restart_required);
});
-------------------------------------------------
shelly_blu_btn.js
/**
 * This script uses the BLE scan functionality in scripting
 * Selects Shelly BLU Buttons from the aired advertisements, decodes
 * the service data payload and toggles a relay on the device on
 * button push
 */

// Shelly BLU devices:
// SBBT - Shelly BLU Button
// SBDW - Shelly BLU DoorWindow

// BTHome data format: https://bthome.io/format/

// sample Shelly DW service_data payload
// 0x40 0x00 0x4E 0x01 0x64 0x05 0x00 0x00 0x00 0x2D 0x01 0x3F 0x00 0x00

// First byte: BTHome device info, 0x40 - no encryption, BTHome v.2
// bit 0: “Encryption flag”
// bit 1-4: “Reserved for future use”
// bit 5-7: “BTHome Version”

// AD 0: PID, 0x00
// Value: 0x4E

// AD 1: Battery, 0x01
// Value, 100%

// AD 2: Illuminance, 0x05
// Value: 0

// AD 3: Window, 0x2D
// Value: true, open

// AD 4: Rotation, 0x3F
// Value: 0

// Device name can be obtained if an active scan is performed
// You can rely only on the address filtering and forego device name matching

// CHANGE HERE
function onButtonPress(BTHparsed) {
    print("Button pressed, emitting event");
  
    // Emits event
    Shelly.emitEvent("BLU_BUTTON", {
      addr: BTHparsed.addr,
      rssi: BTHparsed.rssi,
      Button: BTHparsed.Button,
      Battery: BTHparsed.Battery,
    });
  
    // Toggles the relay on the device
    Shelly.call("Switch.Toggle", { id: 0 });
  }
  
  // remove name prefix to not filter by device name
  // remove address to not filter by address
  // filtering early by address or device name allows for faster execution
  // actions is an array objects containing condition and action property
  // conditions would be checked for equality against the parsed advertisement packet
  // e.g. if there is an addr property in condition and it matches the value of addr property
  // in BTH parsed object then the condition is true
  let CONFIG = {
    shelly_blu_name_prefix: "SBDW",
    //shelly_blu_address: "bc:02:6e:c3:c8:b9",
    actions: [
      {
        cond: {
          addr: "38:39:8f:98:34:a1",
          //Button: 1,
        },
        action: onButtonPress,
      },
      {
        cond: {
          addr: "7c:c6:b6:73:bb:e2",
          //Button: 1,
        },
        action: onButtonPress,
      },
      {
        cond: {
          addr: "e8:e0:7e:bf:21:39",
          //Button: 1,
        },
        action: onButtonPress,
      }
    ],
  };
  // END OF CHANGE
  
  const ALLTERCO_MFD_ID_STR = "0ba9";
  const BTHOME_SVC_ID_STR = "fcd2";
  
  const uint8 = 0;
  const int8 = 1;
  const uint16 = 2;
  const int16 = 3;
  const uint24 = 4;
  const int24 = 5;
  
  // The BTH object defines the structure of the BTHome data
  const BTH = {
    0x00: { n: "pid", t: uint8 },
    0x01: { n: "battery", t: uint8, u: "%" },
    0x02: { n: "temperature", t: int16, f: 0.01, u: "tC" },
    0x03: { n: "humidity", t: uint16, f: 0.01, u: "%" },
    0x05: { n: "illuminance", t: uint24, f: 0.01 },
    0x21: { n: "motion", t: uint8 },
    0x2d: { n: "window", t: uint8 },
    0x2e: { n: "humidity", t: uint8, u: "%" },
    0x3a: { n: "button", t: uint8 },
    0x3f: { n: "rotation", t: int16, f: 0.1 },
    0x45: { n: "temperature", t: int16, f: 0.1, u: "tC" },
  };
  
  function getByteSize(type) {
    if (type === uint8 || type === int8) return 1;
    if (type === uint16 || type === int16) return 2;
    if (type === uint24 || type === int24) return 3;
    //impossible as advertisements are much smaller;
    return 255;
  }
  
  // functions for decoding and unpacking the service data from Shelly BLU devices
  const BTHomeDecoder = {
    utoi: function (num, bitsz) {
      const mask = 1 << (bitsz - 1);
      return num & mask ? num - (1 << bitsz) : num;
    },
    getUInt8: function (buffer) {
      return buffer.at(0);
    },
    getInt8: function (buffer) {
      return this.utoi(this.getUInt8(buffer), 8);
    },
    getUInt16LE: function (buffer) {
      return 0xffff & ((buffer.at(1) << 8) | buffer.at(0));
    },
    getInt16LE: function (buffer) {
      return this.utoi(this.getUInt16LE(buffer), 16);
    },
    getUInt24LE: function (buffer) {
      return (
        0x00ffffff & ((buffer.at(2) << 16) | (buffer.at(1) << 8) | buffer.at(0))
      );
    },
    getInt24LE: function (buffer) {
      return this.utoi(this.getUInt24LE(buffer), 24);
    },
    getBufValue: function (type, buffer) {
      if (buffer.length < getByteSize(type)) return null;
      let res = null;
      if (type === uint8) res = this.getUInt8(buffer);
      if (type === int8) res = this.getInt8(buffer);
      if (type === uint16) res = this.getUInt16LE(buffer);
      if (type === int16) res = this.getInt16LE(buffer);
      if (type === uint24) res = this.getUInt24LE(buffer);
      if (type === int24) res = this.getInt24LE(buffer);
      return res;
    },
  
    // Unpacks the service data buffer from a Shelly BLU device
    unpack: function (buffer) {
      //beacons might not provide BTH service data
      if (typeof buffer !== "string" || buffer.length === 0) return null;
      let result = {};
      let _dib = buffer.at(0);
      result["encryption"] = _dib & 0x1 ? true : false;
      result["BTHome_version"] = _dib >> 5;
      if (result["BTHome_version"] !== 2) return null;
      //can not handle encrypted data
      if (result["encryption"]) return result;
      buffer = buffer.slice(1);
  
      let _bth;
      let _value;
      while (buffer.length > 0) {
        _bth = BTH[buffer.at(0)];
        if (typeof _bth === "undefined") {
          console.log("BTH: Unknown type");
          break;
        }
        buffer = buffer.slice(1);
        _value = this.getBufValue(_bth.t, buffer);
        if (_value === null) break;
        if (typeof _bth.f !== "undefined") _value = _value * _bth.f;
  
        if (typeof result[_bth.n] === "undefined") {
          result[_bth.n] = _value;
        }
        else {
          if (Array.isArray(result[_bth.n])) {
            result[_bth.n].push(_value);
          }
          else {
            result[_bth.n] = [
              result[_bth.n],
              _value
            ];
          }
        }
  
        buffer = buffer.slice(getByteSize(_bth.t));
      }
      return result;
    },
  };
  
  let ShellyBLUParser = {
    getData: function (res) {
      let result = BTHomeDecoder.unpack(res.service_data[BTHOME_SVC_ID_STR]);
      result.addr = res.addr;
      result.rssi = res.rssi;
      return result;
    },
  };
  
  let last_packet_id = 0x100;
  function scanCB(ev, res) {
    if (ev !== BLE.Scanner.SCAN_RESULT) return;
    // skip if there is no service_data member
    if (
      typeof res.service_data === "undefined" ||
      typeof res.service_data[BTHOME_SVC_ID_STR] === "undefined"
    )
      return;
    // skip if we are looking for name match but don't have active scan as we don't have name
    if (
      typeof CONFIG.shelly_blu_name_prefix !== "undefined" &&
      (typeof res.local_name === "undefined" ||
        res.local_name.indexOf(CONFIG.shelly_blu_name_prefix) !== 0)
    )
      return;
    // skip if we don't have address match
    if (
      typeof CONFIG.shelly_blu_address !== "undefined" &&
      CONFIG.shelly_blu_address !== res.addr
    )
      return;
    let BTHparsed = ShellyBLUParser.getData(res);
    // skip if parsing failed
    if (BTHparsed === null) {
      console.log("Failed to parse BTH data");
      return;
    }
    // skip, we are deduping results
    if (last_packet_id === BTHparsed.pid) return;
    last_packet_id = BTHparsed.pid;
    console.log("Shelly BTH packet: ", JSON.stringify(BTHparsed));
    // execute actions from CONFIG
    let aIdx = null;
    for (aIdx in CONFIG.actions) {
      // skip if no condition defined
      if (typeof CONFIG.actions[aIdx]["cond"] === "undefined") continue;
      let cond = CONFIG.actions[aIdx]["cond"];
      let cIdx = null;
      let run = true;
      for (cIdx in cond) {
        if (typeof BTHparsed[cIdx] === "undefined") run = false;
        if (BTHparsed[cIdx] !== cond[cIdx]) run = false;
      }
      // if all conditions evaluated to true then execute
      if (run) CONFIG.actions[aIdx]["action"](BTHparsed);
    }
  }
  
  // retry several times to start the scanner if script was started before
  // BLE infrastructure was up in the Shelly
  function startBLEScan() {
    let bleScanSuccess = BLE.Scanner.Start({ duration_ms: BLE.Scanner.INFINITE_SCAN, active: true}, scanCB);
    if (bleScanSuccess === false) {
      Timer.set(1000, false, startBLEScan);
    } else {
      console.log('Success: BLU button scanner running');
    }
  }
  
  //Check for BLE config and print a message if BLE is not enabled on the device
  let BLEConfig = Shelly.getComponentConfig('ble');
  if (BLEConfig.enable === false) {
    console.log('Error: BLE not enabled');
  } else {
    Timer.set(1000, false, startBLEScan);
  }
-------------------------------------------------
shelly_blu_motion.js
/******************* START CHANGE HERE *******************/
let CONFIG = {
    // When set to true, debug messages will be logged to the console
    debug: false,
  
    // When set to true and the script ownes the scanner, the scan will be active. 
    // Active scan means the scanner will ping back the Bluetooth device to receive all its data, but it will drain the battery faster
    active: true,
  
    // When `allowedMacAddresses` is set to null, evets from every bluetooth device are accepted. 
    // allowedMacAddresses: null, 
    allowedMacAddresses: [
      "b0:c7:de:c7:2e:6d", // events only from these mac addresses are allowed.
    ],
  
    /**
     * Called when motion is reported from the filtered Shelly BLU Motion devices.
     * @param {Boolean} motion true, when there is a motion, false otherwise. 
     * @param {Object} eventData Object, containing all parameters received from the Shelly BLU Motion device. Example: {"encryption":false,"BTHome_version":2,"pid":16,"battery":100,"illuminance":109,"motion":1,"button":1,"rssi":-53,"address":"aa:bc:12:34:56:78"} 
     */
    motionHandler: function (motion, eventData) {
      // Toggle the first replay ON/OFF based on the motion value.
      Shelly.call("Switch.Set", { id: 0, on: motion });
      console.log("Motion", motion);
    },
  
    /**
     * Called when illuminance is reported from the filtered Shelly BLU Motion devices.
     * @param {Number} illuminance Current illuminance value.
     * @param {Object} eventData Object, containing all parameters received from the Shelly BLU Motion device. Example: {"encryption":false,"BTHome_version":2,"pid":16,"battery":100,"illuminance":109,"motion":1,"button":1,"rssi":-53,"address":"aa:bc:12:34:56:78"}
     */
    illuminanceHandler: function (illuminance, eventData) {
      // Compile the topic based on the mac address of the reporter.
      let topic = eventData.address + "/illuminance";
  
      // Publush the data.
      MQTT.publish(topic, String(illuminance));
    },
  
    /**
     * Called when packet from filtered Shelly BLU Motion devices is received.
     * @param {Object} eventData Object, containing all parameters received from the Shelly BLU Motion device. Example: {"encryption":false,"BTHome_version":2,"pid":16,"battery":100,"illuminance":109,"motion":1,"button":1,"rssi":-53,"address":"aa:bc:12:34:56:78"}
     */
    onStatusUpdate: function (eventData) {
      // Do nothing at the moment.
    }
  };
  /******************* STOP CHANGE HERE *******************/
  
  const ALLTERCO_MFD_ID_STR = "0ba9";
  const BTHOME_SVC_ID_STR = "fcd2";
  
  const uint8 = 0;
  const int8 = 1;
  const uint16 = 2;
  const int16 = 3;
  const uint24 = 4;
  const int24 = 5;
  
  // The BTH object defines the structure of the BTHome data
  const BTH = {
    0x00: { n: "pid", t: uint8 },
    0x01: { n: "battery", t: uint8, u: "%" },
    0x02: { n: "temperature", t: int16, f: 0.01, u: "tC" },
    0x03: { n: "humidity", t: uint16, f: 0.01, u: "%" },
    0x05: { n: "illuminance", t: uint24, f: 0.01 },
    0x21: { n: "motion", t: uint8 },
    0x2d: { n: "window", t: uint8 },
    0x2e: { n: "humidity", t: uint8, u: "%" },
    0x3a: { n: "button", t: uint8 },
    0x3f: { n: "rotation", t: int16, f: 0.1 },
    0x45: { n: "temperature", t: int16, f: 0.1, u: "tC" },
  };
  
  function getByteSize(type) {
    if (type === uint8 || type === int8) return 1;
    if (type === uint16 || type === int16) return 2;
    if (type === uint24 || type === int24) return 3;
    //impossible as advertisements are much smaller;
    return 255;
  }
  
  // functions for decoding and unpacking the service data from Shelly BLU devices
  const BTHomeDecoder = {
    utoi: function (num, bitsz) {
      const mask = 1 << (bitsz - 1);
      return num & mask ? num - (1 << bitsz) : num;
    },
    getUInt8: function (buffer) {
      return buffer.at(0);
    },
    getInt8: function (buffer) {
      return this.utoi(this.getUInt8(buffer), 8);
    },
    getUInt16LE: function (buffer) {
      return 0xffff & ((buffer.at(1) << 8) | buffer.at(0));
    },
    getInt16LE: function (buffer) {
      return this.utoi(this.getUInt16LE(buffer), 16);
    },
    getUInt24LE: function (buffer) {
      return (
        0x00ffffff & ((buffer.at(2) << 16) | (buffer.at(1) << 8) | buffer.at(0))
      );
    },
    getInt24LE: function (buffer) {
      return this.utoi(this.getUInt24LE(buffer), 24);
    },
    getBufValue: function (type, buffer) {
      if (buffer.length < getByteSize(type)) return null;
      let res = null;
      if (type === uint8) res = this.getUInt8(buffer);
      if (type === int8) res = this.getInt8(buffer);
      if (type === uint16) res = this.getUInt16LE(buffer);
      if (type === int16) res = this.getInt16LE(buffer);
      if (type === uint24) res = this.getUInt24LE(buffer);
      if (type === int24) res = this.getInt24LE(buffer);
      return res;
    },
  
    // Unpacks the service data buffer from a Shelly BLU device
    unpack: function (buffer) {
      //beacons might not provide BTH service data
      if (typeof buffer !== "string" || buffer.length === 0) return null;
      let result = {};
      let _dib = buffer.at(0);
      result["encryption"] = _dib & 0x1 ? true : false;
      result["BTHome_version"] = _dib >> 5;
      if (result["BTHome_version"] !== 2) return null;
      //can not handle encrypted data
      if (result["encryption"]) return result;
      buffer = buffer.slice(1);
  
      let _bth;
      let _value;
      while (buffer.length > 0) {
        _bth = BTH[buffer.at(0)];
        if (typeof _bth === "undefined") {
          console.log("BTH: Unknown type");
          break;
        }
        buffer = buffer.slice(1);
        _value = this.getBufValue(_bth.t, buffer);
        if (_value === null) break;
        if (typeof _bth.f !== "undefined") _value = _value * _bth.f;
  
        if (typeof result[_bth.n] === "undefined") {
          result[_bth.n] = _value;
        }
        else {
          if (Array.isArray(result[_bth.n])) {
            result[_bth.n].push(_value);
          }
          else {
            result[_bth.n] = [
              result[_bth.n],
              _value
            ];
          }
        }
  
        buffer = buffer.slice(getByteSize(_bth.t));
      }
      return result;
    },
  };
  
  function onReceivedPacket(data) {
    if (CONFIG._processedMacAddresses !== null) {
      if (CONFIG._processedMacAddresses.indexOf(data.address) < 0) {
        //logger(["Received event from", data.address, "outside of the allowed addresses"], "Info");
        return;
      }
    }
  
    if (
      typeof CONFIG.motionHandler === "function" &&
      typeof data.motion !== "undefined"
    ) {
      CONFIG.motionHandler(data.motion === 1, data);
      //logger("Motion handler called", "Info");
    }
  
    if (
      typeof CONFIG.illuminanceHandler === "function" &&
      typeof data.illuminance !== "undefined"
    ) {
      CONFIG.illuminanceHandler(data.illuminance, data);
      //logger("Illuminance handler called", "Info");
    }
  
    if (typeof CONFIG.onStatusUpdate === "function") {
      CONFIG.onStatusUpdate(data);
      //logger("New status update", "Info");
    }
  }
  
  //saving the id of the last packet, this is used to filter the duplicated packets
  let lastPacketId = 0x100;
  
  // Callback for the BLE scanner object
  function BLEScanCallback(event, result) {
    //exit if not a result of a scan
    if (event !== BLE.Scanner.SCAN_RESULT) {
      return;
    }
  
    //exit if service_data member is missing
    if (
      typeof result.service_data === "undefined" ||
      typeof result.service_data[BTHOME_SVC_ID_STR] === "undefined"
    ) {
      return;
    }
  
    let unpackedData = BTHomeDecoder.unpack(
      result.service_data[BTHOME_SVC_ID_STR]
    );
  
    //exit if unpacked data is null or the device is encrypted
    if (
      unpackedData === null ||
      typeof unpackedData === "undefined" ||
      unpackedData["encryption"]
    ) {
      //logger("Encrypted devices are not supported", "Error");
      return;
    }
  
    //exit if the event is duplicated
    if (lastPacketId === unpackedData.pid) {
      return;
    }
  
    lastPacketId = unpackedData.pid;
  
    unpackedData.rssi = result.rssi;
    unpackedData.address = result.addr;
  
    onReceivedPacket(unpackedData);
  }
  
  // Initializes the script and performs the necessary checks and configurations
  function init() {
    //exit if can't find the config
    if (typeof CONFIG === "undefined") {
      console.log("Error: Undefined config");
      return;
    }
  
    //get the config of ble component
    let BLEConfig = Shelly.getComponentConfig("ble");
  
    //exit if the BLE isn't enabled
    if (!BLEConfig.enable) {
      console.log(
        "Error: The Bluetooth is not enabled, please enable it from settings"
      );
      return;
    }
  
    //check if the scanner is already running
    if (BLE.Scanner.isRunning()) {
      console.log("Info: The BLE gateway is running, the BLE scan configuration is managed by the device");
    }
    else {
      //start the scanner
      let bleScanner = BLE.Scanner.Start({
        duration_ms: BLE.Scanner.INFINITE_SCAN,
        active: CONFIG.active
      });
  
      if (!bleScanner) {
        console.log("Error: Can not start new scanner");
      }
    }
  
    if (
      typeof CONFIG.allowedMacAddresses !== "undefined"
    ) {
      if (CONFIG.allowedMacAddresses !== null) {
        // Process configured mac addresses all to lower case and remove duplicates. 
        CONFIG._processedMacAddresses =
          CONFIG
            .allowedMacAddresses
            .map(function (mac) { return mac.toLowerCase(); })
            .filter(function (value, index, array) { return array.indexOf(value) === index; })
      }
      else {
        CONFIG._processedMacAddresses = null;
      }
    }
  
    //subscribe a callback to BLE scanner
    BLE.Scanner.Subscribe(BLEScanCallback);
  }
  
  init();
-------------------------------------------------
test_error_messages.js
let url="http://192.168.10.245/test.htmll";

Shelly.call("HTTP.GET", {url: url, timeout: 5}, function(response, errorCode, errorMessage){
  console.log("Error code:", errorCode);
  console.log("Error message:", errorMessage);
  console.log("Response:", response);
  // to check for errors first check errorCode if 0 or negative(when there is error)
  // if errorCode is 0 check response.code for 200
  console.log("There was an error:", errorCode!==0 || response.code !== 200 )
});
-------------------------------------------------
emit_event_peers.js
[
    "http://192.168.10.200/script/3",
    "http://192.168.10.147/script/1",
    "http://192.168.10.235/script/1"
  ]
-------------------------------------------------
emit_status_filter.js
{
  "filter": "status.component==='rgb:0'"
}
-------------------------------------------------
emit_status_filter_ProPGBWWPM.js
{
  "filter": "status.component==='rgb:0' && (typeof status.delta.brightness != 'undefined' || typeof status.delta.rgb != 'undefined' )"
}
-------------------------------------------------
energy_accumulator.js
let timeCounter = 0;
let energyAccumulator = 0;

Shelly.addStatusHandler(function(eventData){
  if (typeof eventData.component != "undefined" &&
      eventData.component === "switch:0") {
    if (typeof eventData.delta.aenergy != "undefined") {
      let energy = eventData.delta.aenergy.by_minute[0];
      energyAccumulator += energy;
      timeCounter++;
      console.log("Current accumulated energy:", energyAccumulator);
    }
    
    // check if switch is turned off and reset the counters
    if (eventData.delta.output === false) {
      console.log("Switch off, reseting counters");
      energyAccumulator = 0;
      timeCounter = 0;
      Shelly.call("Switch.ResetCounters", {id:0});
    }
  }
});

HTTPServer.registerEndpoint("energy_accumulator", function(request, response){
  let resp = {};
  if (request.method === "GET") {
    resp = {
      "time": timeCounter,
      "accumulated_energy": energyAccumulator
    }
  }
  if (request.method === "POST") {
    let req = JSON.parse(request.body);
    if (req.reset_counters === true) {
      console.log("Reseting counters by user request");
      timeCounter = 0;
      energyAccumulator = 0;
      Shelly.call("Switch.ResetCounters", {id:0});
      resp = {
        "result": "success"
      }
    }
  }

  response.code = 200;
  response.body = JSON.stringify(resp);
  response.headers = [["Content-type", "application/json"]];
  response.send();
});
-------------------------------------------------
p2p_emitter.js
//Sending Events
//---------------------------------------------------------

let CONFIG = {
    EVENT_FILTER_KVS_KEY: "emit_event_filter",
    STATUS_FILTER_KVS_KEY: "emit_status_filter",
    EVENT_PEERS_KVS_KEY: "emit_event_peers",
    URL_SUFFIX: "/events",
    EXTERNAL_EVENT_NAME: "EXTERNAL_EVENT",
    EVENT_TYPE_EVENT: "event",
    EVENT_TYPE_STATUS: "status",
    EVENT_CHANGE_CONFIG: "config_changed",
    MAX_QUERIES: 3,
    SENDER_TIMER_PERIOD: 1000,
    HTTP_TIMEOUT: 5,
  
    DEBUG: false,
  
    eventFilter: {filter:"false"},
    statusFilter: {filter:"false"},
    eventPeers: [],
    deviceId: -1
  };
  
  let callQueue = [];
  let runningCalls = 0;
  let timerHandle = -1;
  
  CONFIG.deviceId = Shelly.getDeviceInfo().id;
  
  function readConfigFromKVS(key, configField) {
    Shelly.call("KVS.GET", {key: key}, function(result) {
      try {
        if (CONFIG.DEBUG)
          console.log("Reading KVS key", key, "returned:", result);
  
        CONFIG[configField] = JSON.parse(result.value);
      } catch(e) {
        console.log("Error processing", key, ":", e)
      }
    });  
  }
  
  readConfigFromKVS(CONFIG.EVENT_FILTER_KVS_KEY, "eventFilter");
  readConfigFromKVS(CONFIG.STATUS_FILTER_KVS_KEY, "statusFilter");
  readConfigFromKVS(CONFIG.EVENT_PEERS_KVS_KEY, "eventPeers");
  
  function emitLocalEvent(event) {
    if (CONFIG.DEBUG)
      console.log("Emiting external event:", event);
    Shelly.emitEvent(CONFIG.EXTERNAL_EVENT_NAME, event);
  }
  
  function sendEventToExternalDevice(event, eventType) {
    // add src to the event
    event.src = CONFIG.deviceId;
    event.event_type = eventType;
    
    // if config was changed include the config for the component as part of the message
    if ( eventType === CONFIG.EVENT_TYPE_EVENT && event.info.event === CONFIG.EVENT_CHANGE_CONFIG) {
      let component;
      if (event.id === -1) {
        component = event.component;
      } else {
        component = event.component + ":" + event.id;
      }
      event.config = Shelly.getComponentConfig(component);
    }
  
    // send the event to the local system to be handled locally too
    emitLocalEvent(event);
    for (peer of CONFIG.eventPeers) {
      let requestOptions = {
        url: peer + CONFIG.URL_SUFFIX,
        timeout: CONFIG.HTTP_TIMEOUT,
        body: JSON.stringify(event)
      };
  
      if (CONFIG.DEBUG)
        console.log("Sending event to",requestOptions.url,"\nEven data:", requestOptions.body);
  
      sendPost(requestOptions);
    }
  }
  
  Shelly.addEventHandler(function (event) {
    if (typeof event != "undefined" && typeof event.info != "undefined" && 
        event.info.event !== CONFIG.EXTERNAL_EVENT_NAME && typeof CONFIG.eventFilter.filter != "undefined" &&
        eval(CONFIG.eventFilter.filter)) {
      if (CONFIG.DEBUG)
        console.log("Sending event", event.info.event, "to peers");
      sendEventToExternalDevice(event, CONFIG.EVENT_TYPE_EVENT);
    }
  });
  
  Shelly.addStatusHandler(function(status) {
    if (typeof status != "undefined" && typeof CONFIG.statusFilter.filter != "undefined" && 
        eval(CONFIG.statusFilter.filter)) {
      if (CONFIG.DEBUG)
        console.log("Sending status change for ", status.component, "to peers");
      sendEventToExternalDevice(status, CONFIG.EVENT_TYPE_STATUS);
    }
  });
  
  function sendPost(requestOptions) {
    callQueue.push(requestOptions);
    processCalls({ timer_flag: false });
  }
  
  function postUrl(requestOptions) {
    runningCalls++;
    Shelly.call("HTTP.POST", requestOptions, function(response, error_code, error_message) {
      if (error_code === 0) {
        if (CONFIG.DEBUG)
          console.log("Response:", response.body);
      } else {
          console.log("Error:", error_message);
      }
      runningCalls--;
    });
  }
  
  function processCalls(data) {
    if (data.timer_flag) {
      timerHandle = -1;
    }
  
    while (runningCalls < CONFIG.MAX_QUERIES && callQueue.length > 0) {
      // dequeue a request from the callQueue
      let request = callQueue.splice(0,1)[0];
      if (CONFIG.DEBUG)
        console.log("Extracting data from queue and sending:", request);
      postUrl(request);
    }
  
    if (timerHandle === -1 && callQueue.length > 0) {
      timerHandle = Timer.set(CONFIG.SENDER_TIMER_PERIOD, false, processCalls, { timer_flag: true });
    }
  }
-------------------------------------------------
p2p_server.js
//Receive Events
//---------------------------------------------------------
//Server
const DEBUG = false;
const EXTERNAL_EVENT_NAME = "EXTERNAL_EVENT";
const URL = "events"

HTTPServer.registerEndpoint(URL, function (request, response) {
  if (request.method === "POST") {
    try {
      let data = JSON.parse(request.body);
      response.code = 200;
      response.headers = [["Content-Type", "application/json"]];
      response.body = JSON.stringify({ status: "success", message: "Data processed", content: data });
      response.send(true);
      proccessExternalEvent(data);
    } catch (e) {
      response.code = 400;
      response.headers = [["Content-Type", "application/json"]];
      response.body = JSON.stringify({ status: "error", message: "Invalid request" });
      response.send(true);
    }
  } else {
    response.code = 405;
    response.send(true);
  }
});

//Emiting receivet object as event
function proccessExternalEvent(eventData) {
  if (DEBUG)
    console.log("Emiting external event:", eventData);
  Shelly.emitEvent(EXTERNAL_EVENT_NAME, eventData);
}
-------------------------------------------------
parse_hue_json.js
const groupId = 82;
const url="http://192.168.10.245/hue.json";

let names = [];

Shelly.call("HTTP.GET", {url:url}, function(response) {
  console.log("Response length:", response.body.length);
//  let parsed_json = JSON.parse(response.body)
//  console.log("Test");
  let group = '"group":"' + groupId + '"'
  console.log("Looking for", group);
  let idx = 0;
  while (idx >= 0) {
    let idx = response.body.indexOf(group, idx);
    if (idx === -1) {
      continue;
    }
    console.log("Found group at", idx);
    let nameIdx = response.body.lastIndexOf('"name":', idx);
    console.log("Found name index at", nameIdx);
    let nameStart = nameIdx + 8;
    let nameEnd = response.body.indexOf('"', nameStart);
    let name = response.body.substring(nameStart, nameEnd);
    console.log("Name for group:", name);
    names.push(name);
    idx++;
  }
  console.log("Scene names found for group", groupId,": ", JSON.stringify(names));
});
-------------------------------------------------
test_http_server.js
HTTPServer.registerEndpoint("my_custom_endpoint", function(request, response){
    console.log(JSON.stringify(request));
    
    response.code = 200;
    //response.body = "Everything is alright!";
    //response.headers = [["Content-type", "text/plain"]];
    response.body = JSON.stringify({
      "result": "success"
    })
    response.headers = [["Content-type", "application/json"]];
    response.send();
  });
-------------------------------------------------
test_put.js
let url = "https://reqbin.com/echo/put/json"

let request={
  lat: 42,
  lon: 24,
  query: "temperature"
}

Shelly.call("HTTP.Request", {method:"PUT", url: url, body:request}, function(response, errorCode, errorMessage){
  console.log(response);
});
-------------------------------------------------
