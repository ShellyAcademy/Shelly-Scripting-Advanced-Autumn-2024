-------------------------------------------------------------
extract_device_info.js
---
let device_ips = ["192.168.10.235","192.168.10.112","192.168.10.230"];

let device_infos = []

for (ip of device_ips) {
  let url = "http://" + ip + "/rpc/Shelly.GetDeviceInfo";
  Shelly.call("HTTP.GET", {url: url}, function(result, errorCode, errorMessage){
    if (errorCode == 0 && result.code == 200) {
      let device_info = JSON.parse(result.body);
      device_infos.push(device_info);
      console.log(JSON.stringify(device_info));
    }
  })
}

HTTPServer.registerEndpoint("get_devices_info", function(request, response){
  let response_str = "name,id,mac\n";
  for (device_info of device_infos) {
    response_str += device_info.name + "," + device_info.id + "," + device_info.mac + "\n";
  }
  response.body = response_str;
  response.status_code = 200;
  response.headers = [["Content-Type", "text/csv"]];
  response.send();
});
-------------------------------------------------------------
-------------------------------------------------------------
mongo_update_switch_states.js
---
const UPDATE_PERIOD_THRESHOLD = 1000; // 1 second

const base_url = "http://192.168.10.118:8080/switch";
const device_info = Shelly.getDeviceInfo();
const device_id = device_info.id;

function updateSwitch(switch_id, output, voltage, apower) {
  let data = {
    device_id: device_id,
    switch_id: switch_id,
    output: output,
    voltage: voltage,
    apower: apower
  }
  let request = {
    url: base_url + "/" + data.device_id + "/" + data.switch_id,
    method: "PUT",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(data)
  }
  Shelly.call("HTTP.Request", request, function(response, error_code, error_message) {
    if (error_code == 0) {
      console.log("Success:", response.body);
    } else {
      console.log("Error:", error_message);
    }
  });
}

let last_update_ts = Date.now() - UPDATE_PERIOD_THRESHOLD;

Shelly.addStatusHandler(function(eventData){
  if (eventData.component.substr(0, 6) === "switch") {
    let ts_now = Date.now();
    if (ts_now - last_update_ts > UPDATE_PERIOD_THRESHOLD) {
      last_update_ts = ts_now;

      let switchStatus = Shelly.getComponentStatus(eventData.component);
      console.log("New status update for", eventData.component);
      updateSwitch(switchStatus.id, switchStatus.output, switchStatus.voltage, switchStatus.apower);
    }
  }
});
-------------------------------------------------------------
-------------------------------------------------------------
mongo_update_switch_status.js
---
const UPDATE_PERIOD_THRESHOLD = 1000; // 1 second

const base_url = "http://192.168.10.118:8080/switch";
const device_info = Shelly.getDeviceInfo();
const device_id = device_info.id;

function updateSwitch(switch_id, output, voltage, apower) {
  let data = {
    device_id: device_id,
    switch_id: switch_id,
    output: output,
    voltage: voltage,
    apower: apower
  }
  let request = {
    url: base_url + "/" + data.device_id + "/" + data.switch_id,
    method: "PUT",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(data)
  }
  Shelly.call("HTTP.Request", request, function(response, error_code, error_message) {
    if (error_code == 0) {
      console.log("Success:", response.body);
    } else {
      console.log("Error:", error_message);
    }
  });
}

let last_update_ts = Date.now() - UPDATE_PERIOD_THRESHOLD;

Shelly.addStatusHandler(function(eventData){
  if (eventData.component.substr(0, 6) === "switch") {
    let ts_now = Date.now();
    if (ts_now - last_update_ts > UPDATE_PERIOD_THRESHOLD) {
      last_update_ts = ts_now;

      let switchStatus = Shelly.getComponentStatus(eventData.component);
      console.log("New status update for", eventData.component);
      updateSwitch(switchStatus.id, switchStatus.output, switchStatus.voltage, switchStatus.apower);
    }
  }
});
-------------------------------------------------------------
-------------------------------------------------------------
notify_motion.js
---
const MOTION_COMPONENT = "bthomesensor:200";

function sendNotification(title, message) {
  const url = "https://alertzy.app/send";
  let data = {
    "accountKey": "7r4nrzw7ree7kor",
    "title": title,
    "message": message
  }
  Shelly.call("HTTP.POST", {url:url, body:JSON.stringify(data)}, function(response, error_code){
    if (error_code===0) {
      if (response.code===200) {
        let body = JSON.parse(response.body);
        if (body.response === "success") {
          console.log("Notification sent successfully");
        }
      }
    }
  });
}

Shelly.addStatusHandler(function(eventData){
  if (eventData.component === MOTION_COMPONENT && typeof  eventData.delta.value != "undefined") {
    let motion = eventData.delta.value;
    if (motion) {
      sendNotification("Motion detected", "Motion is detected in the living room!");
    } else {
      sendNotification("Motion detected", "No motion any more!");
    }
  }
});

//sendNotification("test", "test message");
-------------------------------------------------------------
-------------------------------------------------------------
prometheus.js
---
/*
 * This script exposes a "/status" endpoint that returns Prometheus metrics that can be scraped.
 * It will be reachable under "<ip>/script/<id>/metrics". Id will be 1 if this is your first script.
 *
 * Example Prometheus config:
 *
 * scrape_configs:
 *   - job_name: 'shelly'
 *     metrics_path: /script/1/metrics
 *     static_configs:
 *       - targets: ['<ip>']
 *
 * Replace <ip> with the ip address of the device and adjust the script id if needed.
 *
 * If you use Grafana to display metrics scraped, you can give a try to the example dashboard in prometheus-grafana-example-dashboard.json
 * available via the url https://raw.githubusercontent.com/ALLTERCO/shelly-script-examples/main/prometheus-grafana-example-dashboard.json
 *
 * Note: This script assumes you have one switch, but you can configure that in the Configuration section
 */
// ---------------------------------------------------------------------------------------------------------------------
// Configuration (you can change / adapt here)
// ---------------------------------------------------------------------------------------------------------------------

// Prefix added to all metrics name
const metric_prefix = "shelly_"
// url of metrics. will be used for the last part of "<ip>/script/<id>/<url>"
//    where ip = your plug ip/hostname; id the script id or number (1 if this is the first); url the value below
const url = "metrics"

// List of internal switch to monitor using the shelly's id naming scheme in the form of switch:<id> (ex switch:0)
const monitored_switches = ["switch:0"]

// ---------------------------------------------------------------------------------------------------------------------
// Prometheus exporter
// ---------------------------------------------------------------------------------------------------------------------

const TYPE_GAUGE = "gauge"
const TYPE_COUNTER = "counter"

var info = Shelly.getDeviceInfo();

function promLabel(label, value) {
  return [label, "=", '"', value, '"'].join("");
}

// Will be added to every metrics
var defaultLabels = [
  ["name", info.name],
  ["id", info.id],
  ["mac", info.mac],
  ["app", info.app]
]
  .map(function (data) {
    return promLabel(data[0], data[1]);
  });

/**
 *  Generate one metric output with all the shenanigans around it
 * @param name The name of the metrics (Will be prefixed by metric_prefix value)
 * @param type One of the TYPE_* of metrics. Usually Counter, Gauge, Histogram (not supported yes)
 * @param specificLabels Array of labels generated by promLabel() specific to this metric.
 * @param description An Human description of the metric
 * @param value The actual metric numeric value
 * @returns {string} The metric string to include in final response
 */
function printPrometheusMetric(name, type, specificLabels, description, value) {
  return [
    "# HELP ", metric_prefix, name, " ", description, "\n",
    "# HELP ", metric_prefix, name, " ", type, "\n",
    metric_prefix, name, "{", defaultLabels.join(","), specificLabels.length > 0 ? "," : "", specificLabels.join(","), "}", " ", value, "\n\n"
  ].join("");
}

/**
 * HTTP handler that will be called when the url will be accessed
 * @param request
 * @param response
 */
function httpServerHandler(request, response) {
  response.body = [
    generateMetricsForSystem(),
    monitored_switches.map(function (switch_string_id) {
      return generateMetricsForSwitch(switch_string_id)
    }).join("")
  ].join("")
  response.headers = [["Content-type", "text/plain"]];
  response.code = 200;
  response.send();
}

/**
 * Generate metrics for the system part
 * @returns {string}
 */
function generateMetricsForSystem() {
  const sys = Shelly.getComponentStatus("sys")
  return [
    printPrometheusMetric("uptime_seconds", TYPE_COUNTER, [], "power level in watts", sys.uptime),
    printPrometheusMetric("ram_size_bytes", TYPE_GAUGE, [], "Internal board RAM size in bytes", sys.ram_size),
    printPrometheusMetric("ram_free_bytes", TYPE_GAUGE, [], "Internal board free RAM size in bytes", sys.ram_free)
  ].join("")
}

/**
 * generate metrics for one switch with the name given as parameter
 * @returns {string}
 */
function generateMetricsForSwitch(string_id) {
  const sw = Shelly.getComponentStatus(string_id);
  return [
    printPrometheusMetric("switch_power_watts", TYPE_GAUGE, [promLabel("switch", sw.id)], "Instant power consumption in watts", sw.apower),
    printPrometheusMetric("switch_voltage_volts", TYPE_GAUGE, [promLabel("switch", sw.id)], "Instant voltage in volts", sw.voltage),
    printPrometheusMetric("switch_current_amperes", TYPE_GAUGE, [promLabel("switch", sw.id)], "Instant current in amperes", sw.current),
    printPrometheusMetric("switch_temperature_celsius", TYPE_GAUGE, [promLabel("switch", sw.id)], "temperature of the plug in celsius", sw.temperature.tC),
    printPrometheusMetric("switch_power_total", TYPE_COUNTER, [promLabel("switch", sw.id)], "accumulated energy consumed in watts hours", sw.aenergy.total),
    printPrometheusMetric("switch_output", TYPE_GAUGE, [promLabel("switch", sw.id)], "is switch (1)on or (0)off", sw.output ? 1 : 0)
  ].join("");
}

HTTPServer.registerEndpoint(url, httpServerHandler);
-------------------------------------------------------------
-------------------------------------------------------------
prometheus_scraper.js
---
/*
 * This script exposes a "/status" endpoint that returns Prometheus metrics that can be scraped.
 * It will be reachable under "<ip>/script/<id>/metrics". Id will be 1 if this is your first script.
 *
 * Example Prometheus config:
 *
 * scrape_configs:
 *   - job_name: 'shelly'
 *     metrics_path: /script/1/metrics
 *     static_configs:
 *       - targets: ['<ip>']
 *
 * Replace <ip> with the ip address of the device and adjust the script id if needed.
 *
 * If you use Grafana to display metrics scraped, you can give a try to the example dashboard in prometheus-grafana-example-dashboard.json
 * available via the url https://raw.githubusercontent.com/ALLTERCO/shelly-script-examples/main/prometheus-grafana-example-dashboard.json
 *
 * Note: This script assumes you have one switch, but you can configure that in the Configuration section
 */
// ---------------------------------------------------------------------------------------------------------------------
// Configuration (you can change / adapt here)
// ---------------------------------------------------------------------------------------------------------------------

// Prefix added to all metrics name
const metric_prefix = "shelly_"
// url of metrics. will be used for the last part of "<ip>/script/<id>/<url>"
//    where ip = your plug ip/hostname; id the script id or number (1 if this is the first); url the value below
const url = "metrics"

// List of internal switch to monitor using the shelly's id naming scheme in the form of switch:<id> (ex switch:0)
const monitored_switches = ["switch:0"]

// ---------------------------------------------------------------------------------------------------------------------
// Prometheus exporter
// ---------------------------------------------------------------------------------------------------------------------

const TYPE_GAUGE = "gauge"
const TYPE_COUNTER = "counter"

var info = Shelly.getDeviceInfo();

function promLabel(label, value) {
  return [label, "=", '"', value, '"'].join("");
}

// Will be added to every metrics
var defaultLabels = [
  ["name", info.name],
  ["id", info.id],
  ["mac", info.mac],
  ["app", info.app]
]
  .map(function (data) {
    return promLabel(data[0], data[1]);
  });

/**
 *  Generate one metric output with all the shenanigans around it
 * @param name The name of the metrics (Will be prefixed by metric_prefix value)
 * @param type One of the TYPE_* of metrics. Usually Counter, Gauge, Histogram (not supported yes)
 * @param specificLabels Array of labels generated by promLabel() specific to this metric.
 * @param description An Human description of the metric
 * @param value The actual metric numeric value
 * @returns {string} The metric string to include in final response
 */
function printPrometheusMetric(name, type, specificLabels, description, value) {
  return [
    "# HELP ", metric_prefix, name, " ", description, "\n",
    "# HELP ", metric_prefix, name, " ", type, "\n",
    metric_prefix, name, "{", defaultLabels.join(","), specificLabels.length > 0 ? "," : "", specificLabels.join(","), "}", " ", value, "\n\n"
  ].join("");
}

/**
 * HTTP handler that will be called when the url will be accessed
 * @param request
 * @param response
 */
function httpServerHandler(request, response) {
  response.body = [
    generateMetricsForSystem(),
    monitored_switches.map(function (switch_string_id) {
      return generateMetricsForSwitch(switch_string_id)
    }).join("")
  ].join("")
  response.headers = [["Content-type", "text/plain"]];
  response.code = 200;
  response.send();
}

/**
 * Generate metrics for the system part
 * @returns {string}
 */
function generateMetricsForSystem() {
  const sys = Shelly.getComponentStatus("sys")
  return [
    printPrometheusMetric("uptime_seconds", TYPE_COUNTER, [], "power level in watts", sys.uptime),
    printPrometheusMetric("ram_size_bytes", TYPE_GAUGE, [], "Internal board RAM size in bytes", sys.ram_size),
    printPrometheusMetric("ram_free_bytes", TYPE_GAUGE, [], "Internal board free RAM size in bytes", sys.ram_free)
  ].join("")
}

/**
 * generate metrics for one switch with the name given as parameter
 * @returns {string}
 */
function generateMetricsForSwitch(string_id) {
  const sw = Shelly.getComponentStatus(string_id);
  return [
    printPrometheusMetric("switch_power_watts", TYPE_GAUGE, [promLabel("switch", sw.id)], "Instant power consumption in watts", sw.apower),
    printPrometheusMetric("switch_voltage_volts", TYPE_GAUGE, [promLabel("switch", sw.id)], "Instant voltage in volts", sw.voltage),
    printPrometheusMetric("switch_current_amperes", TYPE_GAUGE, [promLabel("switch", sw.id)], "Instant current in amperes", sw.current),
    printPrometheusMetric("switch_temperature_celsius", TYPE_GAUGE, [promLabel("switch", sw.id)], "temperature of the plug in celsius", sw.temperature.tC),
    printPrometheusMetric("switch_power_total", TYPE_COUNTER, [promLabel("switch", sw.id)], "accumulated energy consumed in watts hours", sw.aenergy.total),
    printPrometheusMetric("switch_output", TYPE_GAUGE, [promLabel("switch", sw.id)], "is switch (1)on or (0)off", sw.output ? 1 : 0)
  ].join("");
}

HTTPServer.registerEndpoint(url, httpServerHandler);


-------------------------------------------------------------
-------------------------------------------------------------
scripts.js
---
--extract_device_info.js

let device_ips = ["192.168.10.235","192.168.10.112","192.168.10.230"];

let device_infos = []

for (ip of device_ips) {
  let url = "http://" + ip + "/rpc/Shelly.GetDeviceInfo";
  Shelly.call("HTTP.GET", {url: url}, function(result, errorCode, errorMessage){
    if (errorCode == 0 && result.code == 200) {
      let device_info = JSON.parse(result.body);
      device_infos.push(device_info);
      console.log(JSON.stringify(device_info));
    }
  })
}

HTTPServer.registerEndpoint("get_devices_info", function(request, response){
  let response_str = "name,id,mac\n";
  for (device_info of device_infos) {
    response_str += device_info.name + "," + device_info.id + "," + device_info.mac + "\n";
  }
  response.body = response_str;
  response.status_code = 200;
  response.headers = [["Content-Type", "text/csv"]];
  response.send();
});


--mongo_update_switch_states.js

const UPDATE_PERIOD_THRESHOLD = 1000; // 1 second

const base_url = "http://192.168.10.118:8080/switch";
const device_info = Shelly.getDeviceInfo();
const device_id = device_info.id;

function updateSwitch(switch_id, output, voltage, apower) {
  let data = {
    device_id: device_id,
    switch_id: switch_id,
    output: output,
    voltage: voltage,
    apower: apower
  }
  let request = {
    url: base_url + "/" + data.device_id + "/" + data.switch_id,
    method: "PUT",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(data)
  }
  Shelly.call("HTTP.Request", request, function(response, error_code, error_message) {
    if (error_code == 0) {
      console.log("Success:", response.body);
    } else {
      console.log("Error:", error_message);
    }
  });
}

let last_update_ts = Date.now() - UPDATE_PERIOD_THRESHOLD;

Shelly.addStatusHandler(function(eventData){
  if (eventData.component.substr(0, 6) === "switch") {
    let ts_now = Date.now();
    if (ts_now - last_update_ts > UPDATE_PERIOD_THRESHOLD) {
      last_update_ts = ts_now;

      let switchStatus = Shelly.getComponentStatus(eventData.component);
      console.log("New status update for", eventData.component);
      updateSwitch(switchStatus.id, switchStatus.output, switchStatus.voltage, switchStatus.apower);
    }
  }
});


--mongo_update_switch_status.js

const UPDATE_PERIOD_THRESHOLD = 1000; // 1 second

const base_url = "http://192.168.10.118:8080/switch";
const device_info = Shelly.getDeviceInfo();
const device_id = device_info.id;

function updateSwitch(switch_id, output, voltage, apower) {
  let data = {
    device_id: device_id,
    switch_id: switch_id,
    output: output,
    voltage: voltage,
    apower: apower
  }
  let request = {
    url: base_url + "/" + data.device_id + "/" + data.switch_id,
    method: "PUT",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(data)
  }
  Shelly.call("HTTP.Request", request, function(response, error_code, error_message) {
    if (error_code == 0) {
      console.log("Success:", response.body);
    } else {
      console.log("Error:", error_message);
    }
  });
}

let last_update_ts = Date.now() - UPDATE_PERIOD_THRESHOLD;

Shelly.addStatusHandler(function(eventData){
  if (eventData.component.substr(0, 6) === "switch") {
    let ts_now = Date.now();
    if (ts_now - last_update_ts > UPDATE_PERIOD_THRESHOLD) {
      last_update_ts = ts_now;

      let switchStatus = Shelly.getComponentStatus(eventData.component);
      console.log("New status update for", eventData.component);
      updateSwitch(switchStatus.id, switchStatus.output, switchStatus.voltage, switchStatus.apower);
    }
  }
});

--notify_motion.js

const MOTION_COMPONENT = "bthomesensor:200";

function sendNotification(title, message) {
  const url = "https://alertzy.app/send";
  let data = {
    "accountKey": "7r4nrzw7ree7kor",
    "title": title,
    "message": message
  }
  Shelly.call("HTTP.POST", {url:url, body:JSON.stringify(data)}, function(response, error_code){
    if (error_code===0) {
      if (response.code===200) {
        let body = JSON.parse(response.body);
        if (body.response === "success") {
          console.log("Notification sent successfully");
        }
      }
    }
  });
}

Shelly.addStatusHandler(function(eventData){
  if (eventData.component === MOTION_COMPONENT && typeof  eventData.delta.value != "undefined") {
    let motion = eventData.delta.value;
    if (motion) {
      sendNotification("Motion detected", "Motion is detected in the living room!");
    } else {
      sendNotification("Motion detected", "No motion any more!");
    }
  }
});

//sendNotification("test", "test message");



--prometheus_scraper.js

/*
 * This script exposes a "/status" endpoint that returns Prometheus metrics that can be scraped.
 * It will be reachable under "<ip>/script/<id>/metrics". Id will be 1 if this is your first script.
 *
 * Example Prometheus config:
 *
 * scrape_configs:
 *   - job_name: 'shelly'
 *     metrics_path: /script/1/metrics
 *     static_configs:
 *       - targets: ['<ip>']
 *
 * Replace <ip> with the ip address of the device and adjust the script id if needed.
 *
 * If you use Grafana to display metrics scraped, you can give a try to the example dashboard in prometheus-grafana-example-dashboard.json
 * available via the url https://raw.githubusercontent.com/ALLTERCO/shelly-script-examples/main/prometheus-grafana-example-dashboard.json
 *
 * Note: This script assumes you have one switch, but you can configure that in the Configuration section
 */
// ---------------------------------------------------------------------------------------------------------------------
// Configuration (you can change / adapt here)
// ---------------------------------------------------------------------------------------------------------------------

// Prefix added to all metrics name
const metric_prefix = "shelly_"
// url of metrics. will be used for the last part of "<ip>/script/<id>/<url>"
//    where ip = your plug ip/hostname; id the script id or number (1 if this is the first); url the value below
const url = "metrics"

// List of internal switch to monitor using the shelly's id naming scheme in the form of switch:<id> (ex switch:0)
const monitored_switches = ["switch:0"]

// ---------------------------------------------------------------------------------------------------------------------
// Prometheus exporter
// ---------------------------------------------------------------------------------------------------------------------

const TYPE_GAUGE = "gauge"
const TYPE_COUNTER = "counter"

var info = Shelly.getDeviceInfo();

function promLabel(label, value) {
  return [label, "=", '"', value, '"'].join("");
}

// Will be added to every metrics
var defaultLabels = [
  ["name", info.name],
  ["id", info.id],
  ["mac", info.mac],
  ["app", info.app]
]
  .map(function (data) {
    return promLabel(data[0], data[1]);
  });

/**
 *  Generate one metric output with all the shenanigans around it
 * @param name The name of the metrics (Will be prefixed by metric_prefix value)
 * @param type One of the TYPE_* of metrics. Usually Counter, Gauge, Histogram (not supported yes)
 * @param specificLabels Array of labels generated by promLabel() specific to this metric.
 * @param description An Human description of the metric
 * @param value The actual metric numeric value
 * @returns {string} The metric string to include in final response
 */
function printPrometheusMetric(name, type, specificLabels, description, value) {
  return [
    "# HELP ", metric_prefix, name, " ", description, "\n",
    "# HELP ", metric_prefix, name, " ", type, "\n",
    metric_prefix, name, "{", defaultLabels.join(","), specificLabels.length > 0 ? "," : "", specificLabels.join(","), "}", " ", value, "\n\n"
  ].join("");
}

/**
 * HTTP handler that will be called when the url will be accessed
 * @param request
 * @param response
 */
function httpServerHandler(request, response) {
  response.body = [
    generateMetricsForSystem(),
    monitored_switches.map(function (switch_string_id) {
      return generateMetricsForSwitch(switch_string_id)
    }).join("")
  ].join("")
  response.headers = [["Content-type", "text/plain"]];
  response.code = 200;
  response.send();
}

/**
 * Generate metrics for the system part
 * @returns {string}
 */
function generateMetricsForSystem() {
  const sys = Shelly.getComponentStatus("sys")
  return [
    printPrometheusMetric("uptime_seconds", TYPE_COUNTER, [], "power level in watts", sys.uptime),
    printPrometheusMetric("ram_size_bytes", TYPE_GAUGE, [], "Internal board RAM size in bytes", sys.ram_size),
    printPrometheusMetric("ram_free_bytes", TYPE_GAUGE, [], "Internal board free RAM size in bytes", sys.ram_free)
  ].join("")
}

/**
 * generate metrics for one switch with the name given as parameter
 * @returns {string}
 */
function generateMetricsForSwitch(string_id) {
  const sw = Shelly.getComponentStatus(string_id);
  return [
    printPrometheusMetric("switch_power_watts", TYPE_GAUGE, [promLabel("switch", sw.id)], "Instant power consumption in watts", sw.apower),
    printPrometheusMetric("switch_voltage_volts", TYPE_GAUGE, [promLabel("switch", sw.id)], "Instant voltage in volts", sw.voltage),
    printPrometheusMetric("switch_current_amperes", TYPE_GAUGE, [promLabel("switch", sw.id)], "Instant current in amperes", sw.current),
    printPrometheusMetric("switch_temperature_celsius", TYPE_GAUGE, [promLabel("switch", sw.id)], "temperature of the plug in celsius", sw.temperature.tC),
    printPrometheusMetric("switch_power_total", TYPE_COUNTER, [promLabel("switch", sw.id)], "accumulated energy consumed in watts hours", sw.aenergy.total),
    printPrometheusMetric("switch_output", TYPE_GAUGE, [promLabel("switch", sw.id)], "is switch (1)on or (0)off", sw.output ? 1 : 0)
  ].join("");
}

HTTPServer.registerEndpoint(url, httpServerHandler);



--prometheus.js

/*
 * This script exposes a "/status" endpoint that returns Prometheus metrics that can be scraped.
 * It will be reachable under "<ip>/script/<id>/metrics". Id will be 1 if this is your first script.
 *
 * Example Prometheus config:
 *
 * scrape_configs:
 *   - job_name: 'shelly'
 *     metrics_path: /script/1/metrics
 *     static_configs:
 *       - targets: ['<ip>']
 *
 * Replace <ip> with the ip address of the device and adjust the script id if needed.
 *
 * If you use Grafana to display metrics scraped, you can give a try to the example dashboard in prometheus-grafana-example-dashboard.json
 * available via the url https://raw.githubusercontent.com/ALLTERCO/shelly-script-examples/main/prometheus-grafana-example-dashboard.json
 *
 * Note: This script assumes you have one switch, but you can configure that in the Configuration section
 */
// ---------------------------------------------------------------------------------------------------------------------
// Configuration (you can change / adapt here)
// ---------------------------------------------------------------------------------------------------------------------

// Prefix added to all metrics name
const metric_prefix = "shelly_"
// url of metrics. will be used for the last part of "<ip>/script/<id>/<url>"
//    where ip = your plug ip/hostname; id the script id or number (1 if this is the first); url the value below
const url = "metrics"

// List of internal switch to monitor using the shelly's id naming scheme in the form of switch:<id> (ex switch:0)
const monitored_switches = ["switch:0"]

// ---------------------------------------------------------------------------------------------------------------------
// Prometheus exporter
// ---------------------------------------------------------------------------------------------------------------------

const TYPE_GAUGE = "gauge"
const TYPE_COUNTER = "counter"

var info = Shelly.getDeviceInfo();

function promLabel(label, value) {
  return [label, "=", '"', value, '"'].join("");
}

// Will be added to every metrics
var defaultLabels = [
  ["name", info.name],
  ["id", info.id],
  ["mac", info.mac],
  ["app", info.app]
]
  .map(function (data) {
    return promLabel(data[0], data[1]);
  });

/**
 *  Generate one metric output with all the shenanigans around it
 * @param name The name of the metrics (Will be prefixed by metric_prefix value)
 * @param type One of the TYPE_* of metrics. Usually Counter, Gauge, Histogram (not supported yes)
 * @param specificLabels Array of labels generated by promLabel() specific to this metric.
 * @param description An Human description of the metric
 * @param value The actual metric numeric value
 * @returns {string} The metric string to include in final response
 */
function printPrometheusMetric(name, type, specificLabels, description, value) {
  return [
    "# HELP ", metric_prefix, name, " ", description, "\n",
    "# HELP ", metric_prefix, name, " ", type, "\n",
    metric_prefix, name, "{", defaultLabels.join(","), specificLabels.length > 0 ? "," : "", specificLabels.join(","), "}", " ", value, "\n\n"
  ].join("");
}

/**
 * HTTP handler that will be called when the url will be accessed
 * @param request
 * @param response
 */
function httpServerHandler(request, response) {
  response.body = [
    generateMetricsForSystem(),
    monitored_switches.map(function (switch_string_id) {
      return generateMetricsForSwitch(switch_string_id)
    }).join("")
  ].join("")
  response.headers = [["Content-type", "text/plain"]];
  response.code = 200;
  response.send();
}

/**
 * Generate metrics for the system part
 * @returns {string}
 */
function generateMetricsForSystem() {
  const sys = Shelly.getComponentStatus("sys")
  return [
    printPrometheusMetric("uptime_seconds", TYPE_COUNTER, [], "power level in watts", sys.uptime),
    printPrometheusMetric("ram_size_bytes", TYPE_GAUGE, [], "Internal board RAM size in bytes", sys.ram_size),
    printPrometheusMetric("ram_free_bytes", TYPE_GAUGE, [], "Internal board free RAM size in bytes", sys.ram_free)
  ].join("")
}

/**
 * generate metrics for one switch with the name given as parameter
 * @returns {string}
 */
function generateMetricsForSwitch(string_id) {
  const sw = Shelly.getComponentStatus(string_id);
  return [
    printPrometheusMetric("switch_power_watts", TYPE_GAUGE, [promLabel("switch", sw.id)], "Instant power consumption in watts", sw.apower),
    printPrometheusMetric("switch_voltage_volts", TYPE_GAUGE, [promLabel("switch", sw.id)], "Instant voltage in volts", sw.voltage),
    printPrometheusMetric("switch_current_amperes", TYPE_GAUGE, [promLabel("switch", sw.id)], "Instant current in amperes", sw.current),
    printPrometheusMetric("switch_temperature_celsius", TYPE_GAUGE, [promLabel("switch", sw.id)], "temperature of the plug in celsius", sw.temperature.tC),
    printPrometheusMetric("switch_power_total", TYPE_COUNTER, [promLabel("switch", sw.id)], "accumulated energy consumed in watts hours", sw.aenergy.total),
    printPrometheusMetric("switch_output", TYPE_GAUGE, [promLabel("switch", sw.id)], "is switch (1)on or (0)off", sw.output ? 1 : 0)
  ].join("");
}

HTTPServer.registerEndpoint(url, httpServerHandler);
-------------------------------------------------------------
-------------------------------------------------------------
simulate_speak.js
---
const TEXT_VC_ID = 200;
const SPEAK_VC_ID = 200;

let text_to_speak = "This is from a script!"

Shelly.call("Text.Set", {id:TEXT_VC_ID, value: text_to_speak}, function(){
  Shelly.call("Button.trigger", {id:SPEAK_VC_ID, event: "single_push"});
});
-------------------------------------------------------------
-------------------------------------------------------------
tts_home_assistant.js
---
const AUTH_TOKEN="<auth-token>>";
const TEXT_VC="text:200";
const SPEAK_VC="button:200";

function send_to_ha(message) {
  let ha_url = "http://192.168.10.245:8123/api/services/tts/speak";
  let data = {
    "entity_id": "tts.google_translate_en_com",
    "media_player_entity_id": "media_player.living_room_speaker",
    "message": message
  }
  let request = {
    url: ha_url,
    method: "POST",
    body: JSON.stringify(data),
    headers:{
      "Authorization": "Bearer " + AUTH_TOKEN
    }
  }
  Shelly.call("HTTP.Request", request);
}

Shelly.addEventHandler(function(eventData){
  if (typeof eventData.component != "undefined" && eventData.component===SPEAK_VC 
      && eventData.info.event === "single_push") {
    let text_to_speak = Shelly.getComponentStatus(TEXT_VC).value;
    console.log("Speaking:", text_to_speak);
    send_to_ha(text_to_speak);
  }
});
-------------------------------------------------------------
